{
  "version": "3.4",
  "log": [
    {
      "@openzeppelin/contracts/access/AccessControl.sol:AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:49",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)22_storage)",
              "contract": "AccessControl",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:55"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)22_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)22_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:29",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:ERC20Pausable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:22",
        "inherit": [
          "@openzeppelin/contracts/utils/Pausable.sol:Pausable",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/utils/Pausable.sol:18"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Pausable.sol:Pausable": {
        "src": "@openzeppelin/contracts/utils/Pausable.sol:17",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_paused",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/utils/Pausable.sol:18"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:25",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:47"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:40"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/AIModelRegistry.sol:AIModelRegistry": {
        "src": "contracts/AIModelRegistry.sol:8",
        "version": {
          "withMetadata": "223e3fede9ecda844ff02e55abf82563c1a53138941caaf545d0940b5211fbd7",
          "withoutMetadata": "035e2995f0474378fe7a140593300d994c8015eebd913ac570874342ed1271a8",
          "linkedWithoutMetadata": "035e2995f0474378fe7a140593300d994c8015eebd913ac570874342ed1271a8"
        },
        "inherit": [
          "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard",
          "@openzeppelin/contracts/access/AccessControl.sol:AccessControl",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "registerModel(string,string,string,string,string,string[],bool,uint256)",
          "updateModel(uint256,string,string,string)",
          "submitPrediction(uint256,string,uint256,bytes32)",
          "validatePrediction(uint256,uint256,bool,uint256)",
          "stakeOnModel(uint256,uint256)",
          "unstakeFromModel(uint256,uint256)",
          "distributeModelRewards(uint256,uint256)",
          "authorizeUser(uint256,address)",
          "deauthorizeUser(uint256,address)",
          "getModel(uint256)",
          "getModelPerformance(uint256)",
          "getModelVersions(uint256)",
          "getModelsByCategory(string)",
          "getModelsByCreator(address)",
          "getUserStake(uint256,address)",
          "getPredictionCount(uint256)",
          "getPrediction(uint256,uint256)",
          "addRewardPool(uint256,uint256)",
          "emergencyDeactivateModel(uint256,string)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AIModelRegistry",
            "src": "contracts/AIModelRegistry.sol:114"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)22_storage)",
              "contract": "AccessControl",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:55"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:40"
            },
            {
              "label": "models",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_struct(AIModel)1671_storage)",
              "contract": "AIModelRegistry",
              "src": "contracts/AIModelRegistry.sol:65"
            },
            {
              "label": "modelVersions",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint256,t_array(t_struct(ModelVersion)1684_storage)dyn_storage)",
              "contract": "AIModelRegistry",
              "src": "contracts/AIModelRegistry.sol:66"
            },
            {
              "label": "modelPredictions",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_array(t_struct(PredictionRecord)1703_storage)dyn_storage)",
              "contract": "AIModelRegistry",
              "src": "contracts/AIModelRegistry.sol:67"
            },
            {
              "label": "modelStakes",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(ModelStake)1714_storage))",
              "contract": "AIModelRegistry",
              "src": "contracts/AIModelRegistry.sol:68"
            },
            {
              "label": "modelStakers",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_array(t_address)dyn_storage)",
              "contract": "AIModelRegistry",
              "src": "contracts/AIModelRegistry.sol:69"
            },
            {
              "label": "modelsByCategory",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_string_memory_ptr,t_array(t_uint256)dyn_storage)",
              "contract": "AIModelRegistry",
              "src": "contracts/AIModelRegistry.sol:70"
            },
            {
              "label": "modelsByCreator",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "contract": "AIModelRegistry",
              "src": "contracts/AIModelRegistry.sol:71"
            },
            {
              "label": "modelCounter",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "AIModelRegistry",
              "src": "contracts/AIModelRegistry.sol:73"
            },
            {
              "label": "totalModelsStaked",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "AIModelRegistry",
              "src": "contracts/AIModelRegistry.sol:74"
            },
            {
              "label": "globalRewardPool",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "AIModelRegistry",
              "src": "contracts/AIModelRegistry.sol:75"
            },
            {
              "label": "sToken",
              "offset": 0,
              "slot": "12",
              "type": "t_contract(IERC20)1257",
              "contract": "AIModelRegistry",
              "src": "contracts/AIModelRegistry.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(ModelVersion)1684_storage)dyn_storage": {
              "label": "struct AIModelRegistry.ModelVersion[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(PredictionRecord)1703_storage)dyn_storage": {
              "label": "struct AIModelRegistry.PredictionRecord[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)1257": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(ModelStake)1714_storage)": {
              "label": "mapping(address => struct AIModelRegistry.ModelStake)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)22_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_string_memory_ptr,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(string => uint256[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_string_memory_ptr,t_uint256)": {
              "label": "mapping(string => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_array(t_address)dyn_storage)": {
              "label": "mapping(uint256 => address[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_array(t_struct(ModelVersion)1684_storage)dyn_storage)": {
              "label": "mapping(uint256 => struct AIModelRegistry.ModelVersion[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_array(t_struct(PredictionRecord)1703_storage)dyn_storage)": {
              "label": "mapping(uint256 => struct AIModelRegistry.PredictionRecord[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(ModelStake)1714_storage))": {
              "label": "mapping(uint256 => mapping(address => struct AIModelRegistry.ModelStake))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(AIModel)1671_storage)": {
              "label": "mapping(uint256 => struct AIModelRegistry.AIModel)",
              "numberOfBytes": "32"
            },
            "t_string_memory_ptr": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(AIModel)1671_storage": {
              "label": "struct AIModelRegistry.AIModel",
              "members": [
                {
                  "label": "name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "version",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "description",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "creator",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "modelHash",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "metadataURI",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "createdAt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "lastUpdated",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "isPublic",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "8"
                },
                {
                  "label": "usageCount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "successRate",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "totalPredictions",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "correctPredictions",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "12"
                },
                {
                  "label": "stakingRequirement",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "13"
                },
                {
                  "label": "performanceMetrics",
                  "type": "t_mapping(t_string_memory_ptr,t_uint256)",
                  "offset": 0,
                  "slot": "14"
                },
                {
                  "label": "authorizedUsers",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "15"
                },
                {
                  "label": "categories",
                  "type": "t_array(t_string_storage)dyn_storage",
                  "offset": 0,
                  "slot": "16"
                },
                {
                  "label": "rewardPool",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "17"
                },
                {
                  "label": "totalStaked",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "18"
                }
              ],
              "numberOfBytes": "608"
            },
            "t_struct(ModelStake)1714_storage": {
              "label": "struct AIModelRegistry.ModelStake",
              "members": [
                {
                  "label": "staker",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "timestamp",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "active",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "rewards",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(ModelVersion)1684_storage": {
              "label": "struct AIModelRegistry.ModelVersion",
              "members": [
                {
                  "label": "version",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "modelHash",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "timestamp",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "changeLog",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "deprecated",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "performanceScore",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(PredictionRecord)1703_storage": {
              "label": "struct AIModelRegistry.PredictionRecord",
              "members": [
                {
                  "label": "modelId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "predictor",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "predictionHash",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "timestamp",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "validated",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "accurate",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "4"
                },
                {
                  "label": "confidenceScore",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "rewardAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "evidenceHash",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "7"
                }
              ],
              "numberOfBytes": "256"
            },
            "t_struct(RoleData)22_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "hasRole",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/KnowledgeDAO.sol:KnowledgeDAO": {
        "src": "contracts/KnowledgeDAO.sol:8",
        "version": {
          "withMetadata": "e541fcbd66b51c19345ec35f866100b767ae218c28ed61e2e418b56f68a91eb6",
          "withoutMetadata": "7ee7a21f39a6f02eb1e72d8c4f41a0b1843bc8a374a8a8e1f374fa54eef5bd02",
          "linkedWithoutMetadata": "7ee7a21f39a6f02eb1e72d8c4f41a0b1843bc8a374a8a8e1f374fa54eef5bd02"
        },
        "inherit": [
          "@openzeppelin/contracts/utils/Pausable.sol:Pausable",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "authorizeAI(address)",
          "submitContent(string)",
          "voteOnContent(uint256,uint256,bool)",
          "finalizeContent(uint256)",
          "claimRewards(uint256)",
          "getContentDetails(uint256)",
          "getUserVote(uint256,address)",
          "pause()",
          "unpause()",
          "updateMinStakeAmount(uint256)",
          "updateVotingPeriod(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "KnowledgeDAO",
            "src": "contracts/KnowledgeDAO.sol:61"
          },
          {
            "kind": "state-variable-assignment",
            "name": "minStakeAmount",
            "src": "contracts/KnowledgeDAO.sol:43"
          },
          {
            "kind": "state-variable-assignment",
            "name": "votingPeriod",
            "src": "contracts/KnowledgeDAO.sol:44"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rewardPercentage",
            "src": "contracts/KnowledgeDAO.sol:45"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:40"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_paused",
              "offset": 20,
              "slot": "1",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/utils/Pausable.sol:18"
            },
            {
              "label": "sToken",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(IERC20)1257",
              "contract": "KnowledgeDAO",
              "src": "contracts/KnowledgeDAO.sol:9"
            },
            {
              "label": "aiContents",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint256,t_struct(AIContent)3228_storage)",
              "contract": "KnowledgeDAO",
              "src": "contracts/KnowledgeDAO.sol:37"
            },
            {
              "label": "votes",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(Vote)3237_storage))",
              "contract": "KnowledgeDAO",
              "src": "contracts/KnowledgeDAO.sol:38"
            },
            {
              "label": "userStats",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_struct(UserStats)3246_storage)",
              "contract": "KnowledgeDAO",
              "src": "contracts/KnowledgeDAO.sol:39"
            },
            {
              "label": "authorizedAI",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "KnowledgeDAO",
              "src": "contracts/KnowledgeDAO.sol:40"
            },
            {
              "label": "contentCounter",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "KnowledgeDAO",
              "src": "contracts/KnowledgeDAO.sol:42"
            },
            {
              "label": "minStakeAmount",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "KnowledgeDAO",
              "src": "contracts/KnowledgeDAO.sol:43"
            },
            {
              "label": "votingPeriod",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "KnowledgeDAO",
              "src": "contracts/KnowledgeDAO.sol:44"
            },
            {
              "label": "rewardPercentage",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "KnowledgeDAO",
              "src": "contracts/KnowledgeDAO.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20)1257": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(UserStats)3246_storage)": {
              "label": "mapping(address => struct KnowledgeDAO.UserStats)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(Vote)3237_storage)": {
              "label": "mapping(address => struct KnowledgeDAO.Vote)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Vote)3237_storage))": {
              "label": "mapping(uint256 => mapping(address => struct KnowledgeDAO.Vote))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(AIContent)3228_storage)": {
              "label": "mapping(uint256 => struct KnowledgeDAO.AIContent)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(AIContent)3228_storage": {
              "label": "struct KnowledgeDAO.AIContent",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "contentHash",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "aiAgent",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "timestamp",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "totalStaked",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "positiveVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "negativeVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "finalized",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "rewardPool",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                }
              ],
              "numberOfBytes": "288"
            },
            "t_struct(UserStats)3246_storage": {
              "label": "struct KnowledgeDAO.UserStats",
              "members": [
                {
                  "label": "totalStaked",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "accuracyScore",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "totalRewards",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "votingPower",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Vote)3237_storage": {
              "label": "struct KnowledgeDAO.Vote",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "positive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "timestamp",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "claimed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/ReputationSystem.sol:ReputationSystem": {
        "src": "contracts/ReputationSystem.sol:7",
        "version": {
          "withMetadata": "d84c24e36b9c0e28a70137407345deb9f33bffa3f1800ca006ad7d07d2706874",
          "withoutMetadata": "9e17060bc403630fccf3b211cc8a13c32ea02e7516cafe5990afbf854908ded5",
          "linkedWithoutMetadata": "9e17060bc403630fccf3b211cc8a13c32ea02e7516cafe5990afbf854908ded5"
        },
        "inherit": [
          "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "authorizeOracle(address)",
          "updateReputation(address,string,int256,bytes32,bool)",
          "submitAIValidation(bytes32,uint256,bool)",
          "endorseUser(address)",
          "updateExpertiseArea(address,string,uint256)",
          "getUserReputation(address)",
          "getUserExpertise(address,string)",
          "getExpertsByArea(string)",
          "getEndorsements(address)",
          "getTotalTransactions()",
          "getRecentTransactions(uint256)",
          "updateActionTypeWeight(string,uint256)",
          "emergencyResetUser(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReputationSystem",
            "src": "contracts/ReputationSystem.sol:75"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:40"
            },
            {
              "label": "userReputations",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_struct(UserReputation)3908_storage)",
              "contract": "ReputationSystem",
              "src": "contracts/ReputationSystem.sol:36"
            },
            {
              "label": "reputationHistory",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_struct(ReputationTransaction)3923_storage)",
              "contract": "ReputationSystem",
              "src": "contracts/ReputationSystem.sol:37"
            },
            {
              "label": "actionTypeWeights",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_string_memory_ptr,t_uint256)",
              "contract": "ReputationSystem",
              "src": "contracts/ReputationSystem.sol:38"
            },
            {
              "label": "authorizedValidators",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "ReputationSystem",
              "src": "contracts/ReputationSystem.sol:39"
            },
            {
              "label": "endorsements",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ReputationSystem",
              "src": "contracts/ReputationSystem.sol:42"
            },
            {
              "label": "endorsedBy",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
              "contract": "ReputationSystem",
              "src": "contracts/ReputationSystem.sol:43"
            },
            {
              "label": "expertsByArea",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_string_memory_ptr,t_array(t_address)dyn_storage)",
              "contract": "ReputationSystem",
              "src": "contracts/ReputationSystem.sol:44"
            },
            {
              "label": "allTransactions",
              "offset": 0,
              "slot": "9",
              "type": "t_array(t_bytes32)dyn_storage",
              "contract": "ReputationSystem",
              "src": "contracts/ReputationSystem.sol:51"
            },
            {
              "label": "totalUsers",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "ReputationSystem",
              "src": "contracts/ReputationSystem.sol:52"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_int256": {
              "label": "int256",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_array(t_address)dyn_storage)": {
              "label": "mapping(address => address[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(UserReputation)3908_storage)": {
              "label": "mapping(address => struct ReputationSystem.UserReputation)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(ReputationTransaction)3923_storage)": {
              "label": "mapping(bytes32 => struct ReputationSystem.ReputationTransaction)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_string_memory_ptr,t_array(t_address)dyn_storage)": {
              "label": "mapping(string => address[])",
              "numberOfBytes": "32"
            },
            "t_mapping(t_string_memory_ptr,t_uint256)": {
              "label": "mapping(string => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_memory_ptr": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ReputationTransaction)3923_storage": {
              "label": "struct ReputationSystem.ReputationTransaction",
              "members": [
                {
                  "label": "user",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "actionType",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "scoreChange",
                  "type": "t_int256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "timestamp",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "evidenceHash",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "aiValidated",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "confidenceScore",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(UserReputation)3908_storage": {
              "label": "struct ReputationSystem.UserReputation",
              "members": [
                {
                  "label": "totalScore",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "contentScore",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "communityScore",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "aiValidationScore",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "lastUpdateTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "votingAccuracy",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "stakingHistory",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "communityContribution",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "8"
                },
                {
                  "label": "isInfluencer",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "9"
                },
                {
                  "label": "followerCount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "10"
                },
                {
                  "label": "timeBasedDecay",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "11"
                },
                {
                  "label": "lastUpdateTimestamp",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "12"
                },
                {
                  "label": "expertiseAreas",
                  "type": "t_mapping(t_string_memory_ptr,t_uint256)",
                  "offset": 0,
                  "slot": "13"
                }
              ],
              "numberOfBytes": "448"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/STokenERC20.sol:STokenERC20": {
        "src": "contracts/STokenERC20.sol:10",
        "version": {
          "withMetadata": "97ff91de58b839891fd1c9ffff105d0cf0cad10a1800f8979b3ede1c68af40be",
          "withoutMetadata": "e7b800ccc66a1440b420796a8222f1f7f6454b58b0bd78c6cdb6591142056af6",
          "linkedWithoutMetadata": "e7b800ccc66a1440b420796a8222f1f7f6454b58b0bd78c6cdb6591142056af6"
        },
        "inherit": [
          "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:ERC20Pausable",
          "@openzeppelin/contracts/utils/Pausable.sol:Pausable",
          "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:ERC20Burnable",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256,address)",
          "setKnowledgeDAO(address)",
          "addMinter(address)",
          "removeMinter(address)",
          "mint(address,uint256)",
          "createVestingSchedule(address,uint256,uint256,uint256,bool)",
          "releaseVestedTokens()",
          "stake(uint256,uint256)",
          "unstake()",
          "claimStakingRewards()",
          "distributeActivityReward(address,uint256,string)",
          "updateRewardMultipliers(uint256,uint256,uint256,uint256,uint256)",
          "updateStakingTier(uint256,uint256,uint256,uint256,bool)",
          "updateFeeRates(uint256,uint256,uint256)",
          "pause()",
          "unpause()",
          "getVestingSchedule(address)",
          "getVestedAmount(address)",
          "getUserStakeInfo(address)",
          "getStakingTier(uint256)",
          "calculateStakingRewards(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "STokenERC20",
            "src": "contracts/STokenERC20.sol:98"
          },
          {
            "kind": "state-variable-assignment",
            "name": "burnRate",
            "src": "contracts/STokenERC20.sol:68"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rewardPoolRate",
            "src": "contracts/STokenERC20.sol:69"
          },
          {
            "kind": "state-variable-assignment",
            "name": "treasuryRate",
            "src": "contracts/STokenERC20.sol:70"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "5",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/utils/Pausable.sol:18"
            },
            {
              "label": "_owner",
              "offset": 1,
              "slot": "5",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:40"
            },
            {
              "label": "vestingSchedules",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(VestingSchedule)5260_storage)",
              "contract": "STokenERC20",
              "src": "contracts/STokenERC20.sol:21"
            },
            {
              "label": "minters",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "STokenERC20",
              "src": "contracts/STokenERC20.sol:22"
            },
            {
              "label": "stakingRewards",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "STokenERC20",
              "src": "contracts/STokenERC20.sol:23"
            },
            {
              "label": "rewardMultipliers",
              "offset": 0,
              "slot": "10",
              "type": "t_struct(RewardMultipliers)5271_storage",
              "contract": "STokenERC20",
              "src": "contracts/STokenERC20.sol:44"
            },
            {
              "label": "stakingTiers",
              "offset": 0,
              "slot": "15",
              "type": "t_mapping(t_uint256,t_struct(StakingTier)5283_storage)",
              "contract": "STokenERC20",
              "src": "contracts/STokenERC20.sol:54"
            },
            {
              "label": "userStakes",
              "offset": 0,
              "slot": "16",
              "type": "t_mapping(t_address,t_struct(UserStakeInfo)5306_storage)",
              "contract": "STokenERC20",
              "src": "contracts/STokenERC20.sol:55"
            },
            {
              "label": "totalFeesCollected",
              "offset": 0,
              "slot": "17",
              "type": "t_uint256",
              "contract": "STokenERC20",
              "src": "contracts/STokenERC20.sol:67"
            },
            {
              "label": "burnRate",
              "offset": 0,
              "slot": "18",
              "type": "t_uint256",
              "contract": "STokenERC20",
              "src": "contracts/STokenERC20.sol:68"
            },
            {
              "label": "rewardPoolRate",
              "offset": 0,
              "slot": "19",
              "type": "t_uint256",
              "contract": "STokenERC20",
              "src": "contracts/STokenERC20.sol:69"
            },
            {
              "label": "treasuryRate",
              "offset": 0,
              "slot": "20",
              "type": "t_uint256",
              "contract": "STokenERC20",
              "src": "contracts/STokenERC20.sol:70"
            },
            {
              "label": "treasuryWallet",
              "offset": 0,
              "slot": "21",
              "type": "t_address",
              "contract": "STokenERC20",
              "src": "contracts/STokenERC20.sol:72"
            },
            {
              "label": "rewardPool",
              "offset": 0,
              "slot": "22",
              "type": "t_address",
              "contract": "STokenERC20",
              "src": "contracts/STokenERC20.sol:73"
            },
            {
              "label": "knowledgeDAO",
              "offset": 0,
              "slot": "23",
              "type": "t_address",
              "contract": "STokenERC20",
              "src": "contracts/STokenERC20.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(UserStakeInfo)5306_storage)": {
              "label": "mapping(address => struct STokenERC20.UserStakeInfo)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(VestingSchedule)5260_storage)": {
              "label": "mapping(address => struct STokenERC20.VestingSchedule)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(StakingTier)5283_storage)": {
              "label": "mapping(uint256 => struct STokenERC20.StakingTier)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(RewardMultipliers)5271_storage": {
              "label": "struct STokenERC20.RewardMultipliers",
              "members": [
                {
                  "label": "votingAccuracy",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "earlyAdoption",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "liquidityProvider",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "contentCreation",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "communityGov",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(StakingTier)5283_storage": {
              "label": "struct STokenERC20.StakingTier",
              "members": [
                {
                  "label": "minAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "multiplier",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lockPeriod",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "active",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(UserStakeInfo)5306_storage": {
              "label": "struct STokenERC20.UserStakeInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tier",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "lastRewardClaim",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "isLocked",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(VestingSchedule)5260_storage": {
              "label": "struct STokenERC20.VestingSchedule",
              "members": [
                {
                  "label": "totalAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "releasedAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "cliffDuration",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "vestingDuration",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "revocable",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "revoked",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      }
    }
  ]
}