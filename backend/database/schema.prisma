generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id            String   @id @default(cuid())
    walletAddress String   @unique
    ensName       String?
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt

    // User statistics
    totalStaked   BigInt @default(0)
    accuracyScore Int    @default(0)
    totalRewards  BigInt @default(0)
    votingPower   BigInt @default(0)
    reputation    Int    @default(0)

    // User preferences
    preferences          Json?
    notificationSettings Json?

    // Relations
    votes          Vote[]
    stakingHistory StakingHistory[]
    rewardClaims   RewardClaim[]
    activities     UserActivity[]

    @@map("users")
}

model NewsArticle {
    id          String   @id @default(cuid())
    title       String
    description String?
    url         String   @unique
    publishedAt DateTime
    source      String
    author      String?
    imageUrl    String?

    // Analysis results
    mentionedTokens String[]
    sentiment       Float    @default(0)
    confidence      Float    @default(0)
    categories      String[]
    keyPhrases      String[]

    // Metadata
    language    String @default("en")
    wordCount   Int?
    readingTime Int? // in minutes

    // Social metrics
    socialShares   Int @default(0)
    socialLikes    Int @default(0)
    socialComments Int @default(0)

    // Processing status
    processed       Boolean @default(false)
    processingError String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([publishedAt])
    @@index([source])
    @@index([mentionedTokens])
    @@map("news_articles")
}

model PriceData {
    id                String @id @default(cuid())
    symbol            String
    price             Float
    change24h         Float
    change7d          Float?
    change30d         Float?
    volume24h         Float
    marketCap         Float?
    circulatingSupply Float?
    totalSupply       Float?

    // Technical indicators
    rsi            Float?
    macd           Json? // {line, signal, histogram}
    bollingerBands Json? // {upper, middle, lower}
    sma20          Float?
    sma50          Float?
    sma200         Float?

    // Volatility metrics
    volatility24h Float?
    volatility7d  Float?
    volatility30d Float?

    timestamp DateTime
    createdAt DateTime @default(now())

    @@index([symbol, timestamp])
    @@index([timestamp])
    @@map("price_data")
}

model SentimentData {
    id         String @id @default(cuid())
    token      String
    source     String // news, twitter, reddit, telegram
    sentiment  Float // -1 to 1
    confidence Float // 0 to 1
    volume     Int    @default(0)

    // Source-specific data
    articleCount Int?
    tweetCount   Int?
    postCount    Int?
    mentionCount Int?

    // Emotion analysis
    emotions Json? // {joy, anger, fear, surprise, etc.}

    // Influencer sentiment
    influencerSentiment Float?
    influencerCount     Int?

    // Trending topics
    trendingTopics String[]
    keyPhrases     String[]

    timestamp DateTime
    createdAt DateTime @default(now())

    @@index([token, timestamp])
    @@index([source, timestamp])
    @@map("sentiment_data")
}

model OnChainMetric {
    id           String @id @default(cuid())
    token        String
    tokenAddress String

    // Network activity
    activeAddresses  Int
    transactionCount Int
    volumeUSD        Float
    uniqueSenders    Int?
    uniqueReceivers  Int?

    // DeFi metrics
    liquidityUSD     Float?
    totalValueLocked Float?
    liquidityPools   Int?

    // Token distribution
    holders            Int
    whaleAddresses     Int?
    concentrationIndex Float?

    // Network health
    hashRate    Float?
    networkFees Float?
    blockTime   Float?

    // Social metrics
    githubCommits Int?
    githubStars   Int?
    forumActivity Int?

    timestamp DateTime
    createdAt DateTime @default(now())

    @@index([token, timestamp])
    @@map("onchain_metrics")
}

model ResearchReport {
    id          String @id @default(cuid())
    token       String
    contentHash String @unique

    // AI-generated content
    executiveSummary       String
    keyFindings            Json
    marketSentiment        Json
    pricePredictions       Json
    riskAssessment         String
    tradingRecommendations String[]

    // Analysis metadata
    confidence   Float
    dataQuality  Float?
    sourcesCount Int?

    // Detailed analysis breakdown
    detailedAnalysis Json // Complete analysis data

    // Voting and validation
    totalVotes      Int     @default(0)
    positiveVotes   Int     @default(0)
    negativeVotes   Int     @default(0)
    totalStaked     BigInt  @default(0)
    validated       Boolean @default(false)
    validationScore Float?

    // Blockchain data
    blockchainTxHash String?
    smartContractId  Int?

    // Performance tracking
    accuracyScore      Float?
    performanceMetrics Json?

    timestamp DateTime
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    votes         Vote[]
    smartContract SmartContract? @relation(fields: [smartContractId], references: [id])

    @@index([token, timestamp])
    @@index([contentHash])
    @@index([validated])
    @@map("research_reports")
}

model SmartContract {
    id              Int      @id @default(autoincrement())
    contractAddress String   @unique
    deployedAt      DateTime
    networkId       Int
    contractType    String // KnowledgeDAO, SToken, etc.

    // Contract metadata
    version        String
    upgradeHistory Json?

    // Relations
    researchReports ResearchReport[]
    votes           Vote[]
    stakingHistory  StakingHistory[]

    @@map("smart_contracts")
}

model Vote {
    id         String @id @default(cuid())
    userId     String
    reportId   String
    contractId Int?

    amount    BigInt
    positive  Boolean
    timestamp DateTime
    claimed   Boolean   @default(false)
    claimedAt DateTime?

    // Vote metadata
    votingPower     BigInt?
    confidenceLevel Float?
    reasoning       String?

    // Reward calculation
    rewardAmount  BigInt?
    penaltyAmount BigInt?

    // Blockchain data
    txHash      String?
    blockNumber Int?
    gasUsed     Int?

    createdAt DateTime @default(now())

    // Relations
    user          User           @relation(fields: [userId], references: [id])
    report        ResearchReport @relation(fields: [reportId], references: [id])
    smartContract SmartContract? @relation(fields: [contractId], references: [id])

    @@unique([userId, reportId])
    @@index([userId, timestamp])
    @@index([reportId])
    @@index([timestamp])
    @@map("votes")
}

model StakingHistory {
    id         String @id @default(cuid())
    userId     String
    contractId Int?

    action      String // stake, unstake, claim_rewards
    amount      BigInt
    stakingTier Int?

    // Staking details
    lockPeriod Int? // in seconds
    startTime  DateTime?
    endTime    DateTime?

    // Rewards
    rewardRate         Float?
    accumulatedRewards BigInt @default(0)

    // Blockchain data
    txHash      String?
    blockNumber Int?
    gasUsed     Int?

    timestamp DateTime
    createdAt DateTime @default(now())

    // Relations
    user          User           @relation(fields: [userId], references: [id])
    smartContract SmartContract? @relation(fields: [contractId], references: [id])

    @@index([userId, timestamp])
    @@index([action])
    @@map("staking_history")
}

model RewardClaim {
    id       String  @id @default(cuid())
    userId   String
    reportId String?

    rewardType String // voting, staking, accuracy, early_adoption
    amount     BigInt

    // Calculation details
    baseAmount  BigInt?
    multiplier  Float?
    bonusAmount BigInt?

    // Blockchain data
    txHash      String?
    blockNumber Int?
    gasUsed     Int?

    timestamp DateTime
    createdAt DateTime @default(now())

    // Relations
    user User @relation(fields: [userId], references: [id])

    @@index([userId, timestamp])
    @@index([rewardType])
    @@map("reward_claims")
}

model UserActivity {
    id     String @id @default(cuid())
    userId String

    activityType String // vote, stake, claim, report_view
    description  String?
    metadata     Json?

    // Context
    reportId        String?
    contractAddress String?

    timestamp DateTime
    createdAt DateTime @default(now())

    // Relations
    user User @relation(fields: [userId], references: [id])

    @@index([userId, timestamp])
    @@index([activityType])
    @@map("user_activities")
}

model MarketSignal {
    id         String @id @default(cuid())
    token      String
    signalType String // bullish, bearish, neutral, whale_movement, etc.

    strength   Float // -1 to 1
    confidence Float // 0 to 1
    source     String // ai_analysis, on_chain, sentiment, technical

    description String
    metadata    Json?

    // Signal validation
    validated       Boolean @default(false)
    validationScore Float?

    // Performance tracking
    accuracy    Float?
    outcomeTime DateTime?

    timestamp DateTime
    createdAt DateTime @default(now())

    @@index([token, timestamp])
    @@index([signalType])
    @@index([validated])
    @@map("market_signals")
}

model TechnicalIndicator {
    id            String @id @default(cuid())
    token         String
    indicatorType String // RSI, MACD, SMA, etc.

    value    Float
    signal   String // buy, sell, hold
    strength Float // 0 to 100

    // Indicator-specific data
    parameters   Json?
    calculations Json?

    timestamp DateTime
    createdAt DateTime @default(now())

    @@index([token, indicatorType, timestamp])
    @@map("technical_indicators")
}

model AIAgent {
    id            String @id @default(cuid())
    name          String
    walletAddress String @unique

    agentType String // research_generator, sentiment_analyzer, etc.
    version   String

    // Performance metrics
    accuracyRate     Float @default(0)
    totalReports     Int   @default(0)
    validatedReports Int   @default(0)

    // Configuration
    modelConfig Json?
    parameters  Json?

    // Status
    active       Boolean   @default(true)
    lastActivity DateTime?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("ai_agents")
}

model SystemMetric {
    id         String  @id @default(cuid())
    metricName String
    value      Float
    unit       String?

    // Metadata
    category    String?
    description String?
    tags        String[]

    timestamp DateTime
    createdAt DateTime @default(now())

    @@index([metricName, timestamp])
    @@index([category])
    @@map("system_metrics")
}
